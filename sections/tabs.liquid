{% liquid 
  assign show_section = false
  for block in section.blocks
      if block.settings.page != blank or block.settings.custom_heading != blank and block.settings.text != blank
          assign show_section = true
      endif
  endfor
%}
{% if section.blocks.size > 0 and show_section %}
{{ 'section-tabs.css' | asset_url | stylesheet_tag }}

{%- liquid
    assign disable_max_width = false
    if section.settings.disable_max_width 
      assign disable_max_width = true
    elsif section.settings.grid_style == 'page' and settings.full_width_page_grid
      assign disable_max_width = true
    elsif section.settings.grid_style == 'alternative' and settings.full_width_alt_grid
      assign disable_max_width = true
    elsif section.settings.grid_style == 'secondary' and settings.full_width_second_grid
      assign disable_max_width = true
    endif
  
    assign section_framing = false
    if section.settings.section_framing != 'disable'
        assign section_framing = true
    endif
-%}

{% style %}
    #shopify-section-{{ section.id }} {
        --top-spacing: {{ section.settings.top_spacing }};
        --bottom-spacing: {{ section.settings.bottom_spacing }};
    }
{% endstyle %}

<div class="section{% unless section_framing %} color-{{ section.settings.color_scheme }}{% endunless %} side-margins{% if section.settings.show_bottom_line %} bottom-line{% endif %}">
    <div class="section-tabs tabs tabs-container-js section-container{% if section_framing and section.settings.section_framing == 'grid' %} {{ section.settings.grid_style }}-grid{% if disable_max_width %} disable-max-width{% endif %}{% endif %}{% unless section_framing %} {{ section.settings.grid_style }}-grid{% if disable_max_width %} disable-max-width{% endif %}{% endunless %}">
      {% if section_framing %}<div class="section-radius elem-padding-l color-{{ section.settings.color_scheme }}"><div {% if section.settings.section_framing != 'grid' %}class="{{ section.settings.grid_style }}-grid{% if disable_max_width %} disable-max-width{% endif %}"{% endif %}>{% endif %}
        <div class="section-header{% if section.settings.center_text %} center{% endif %}">
            {%- if section.settings.subheading != blank -%}
              {%- liquid
                assign uppercase_subheading = false
                if section.settings.subheading_style == 'section-heading' and settings.uppercase_section_headings
                    assign uppercase_subheading = true
                elsif section.settings.subheading_style == 'secondary-heading' and settings.uppercase_secondary_headings
                    assign uppercase_subheading = true
                elsif section.settings.subheading_style == 'subheading-font' and settings.uppercase_subheadings
                    assign uppercase_subheading = true
                elsif section.settings.subheading_style == 'body-font' and settings.uppercase_body
                    assign uppercase_subheading = true
                elsif section.settings.subheading_style == 'caption-font' and settings.uppercase_caption
                    assign uppercase_subheading = true
                endif
              -%}
              <{{ section.settings.subheading_tag }} class="{{ section.settings.subheading_style }}{% if uppercase_subheading %} uppercase{% endif %} 
                {% if section.settings.subheading_style == 'subheading-font' %}{% if settings.use_heading_font_subheadings %} subheading-heading-font{% endif %}{% endif %}">
                {% if section.settings.subheading_style == 'subheading-font' and settings.bolder_subheadings_font %}<b>{% endif %}
                  {{ section.settings.subheading }}
                {% if section.settings.subheading_style == 'subheading-font' and settings.bolder_subheadings_font %}</b>{% endif %}
              </{{ section.settings.subheading_tag }}>
          {%- endif -%}
            {%- if section.settings.heading != blank -%}
              {%- liquid
                assign uppercase_heading = false
                if section.settings.heading_style == 'secondary-heading' and settings.uppercase_secondary_headings
                    assign uppercase_heading = true
                elsif section.settings.heading_style == 'section-heading' and settings.uppercase_section_headings
                    assign uppercase_heading = true
                elsif section.settings.heading_style == 'page-title' and settings.uppercase_page_titles
                    assign uppercase_heading = true
                elsif section.settings.heading_style == 'subheading-font' and settings.uppercase_subheadings
                    assign uppercase_heading = true
                elsif section.settings.heading_style == 'body-font' and settings.uppercase_body
                    assign uppercase_heading = true
                elsif section.settings.heading_style == 'caption-font' and settings.uppercase_caption
                    assign uppercase_heading = true
                endif

                assign heading_text = section.settings.heading
                assign processed_text = ''
                assign split_text = heading_text | split: '['

                for part in split_text
                  if part contains ']'
                    assign split_bracket = part | split: ']'
                    assign highlight_text = split_bracket[0]
                    assign after_bracket = split_bracket[1]
                    assign processed_text = processed_text | append: '<span class="highlight"><span>' | append: highlight_text | append: '</span></span>' | append: after_bracket
                  else
                    assign processed_text = processed_text | append: part
                  endif
                endfor

                assign final_text = ''
                assign split_text_curly = processed_text | split: '{'

                for part in split_text_curly
                  if part contains '}'
                    assign split_curly = part | split: '}'
                    assign styled_text = split_curly[0]
                    assign after_curly = split_curly[1]
                    assign final_text = final_text | append: '<span class="styled">' | append: styled_text | append: '</span>' | append: after_curly
                  else
                    assign final_text = final_text | append: part
                  endif
                endfor
              -%}
              <{{ section.settings.heading_tag }} class="custom-heading {{ section.settings.heading_style }}{% if uppercase_heading %} uppercase{% endif %}{% if section.settings.heading_style == 'subheading-font' and settings.use_heading_font_subheadings %} subheading-heading-font{% endif %}">
                {% if section.settings.heading_style == 'subheading-font' and settings.bolder_subheadings_font %}<b>{% endif %}{{ final_text }}{% if section.settings.heading_style == 'subheading-font' and settings.bolder_subheadings_font %}</b>{% endif %}
              </{{ section.settings.heading_tag }}>
            {%- endif -%}
            <div class="component-tabs hide-scrollbar">
                <component-tabs class="component-tabs__wrapper">
                    {%- for block in section.blocks -%}
                        {% if block.settings.page != blank or block.settings.custom_heading != blank and block.settings.text != blank %}
                          {%- liquid
                            assign uppercase_heading = false
                            if block.settings.heading_style == 'section-heading' and settings.uppercase_section_headings
                              assign uppercase_heading = true
                            elsif block.settings.heading_style == 'secondary-heading' and settings.uppercase_secondary_headings
                              assign uppercase_heading = true
                            elsif block.settings.heading_style == 'subheading-font' and settings.uppercase_subheadings
                                assign uppercase_heading = true
                            elsif block.settings.heading_style == 'body-font' and settings.uppercase_body
                                assign uppercase_heading = true
                            elsif block.settings.heading_style == 'caption-font' and settings.uppercase_caption
                                assign uppercase_heading = true
                            endif

                            assign heading_text = block.settings.custom_heading
                            assign processed_text = ''
                            assign split_text = heading_text | split: '['

                              for part in split_text
                              if part contains ']'
                                assign split_bracket = part | split: ']'
                                assign highlight_text = split_bracket[0] | strip
                                assign after_bracket = split_bracket[1] | strip
                                assign has_before = false
                                assign has_after = false
                                if processed_text != ''
                                  assign has_before = true
                                endif
                                if after_bracket != ''
                                  assign has_after = true
                                endif
                                if has_before and has_after
                                  assign processed_text = processed_text  | strip | append: '&nbsp;<span class="highlight"><span>' | append: highlight_text | append: '</span></span>&nbsp;' | append: after_bracket
                                elsif has_before
                                  assign processed_text = processed_text  | strip | append: '&nbsp;<span class="highlight"><span>' | append: highlight_text | append: '</span></span>' | append: after_bracket
                                elsif has_after
                                  assign processed_text = processed_text  | strip | append: '<span class="highlight"><span>' | append: highlight_text | append: '</span></span>&nbsp;' | append: after_bracket
                                else
                                  assign processed_text = processed_text  | strip | append: '<span class="highlight"><span>' | append: highlight_text | append: '</span></span>' | append: after_bracket
                                endif
                              else
                                assign processed_text = processed_text | append: part
                              endif
                              endfor

                              
                              assign final_text = ''
                              assign split_text_curly = processed_text | split: '{'

                              for part in split_text_curly
                                if part contains '}'
                                  assign split_curly = part | split: '}'
                                  assign styled_text = split_curly[0] | strip
                                  assign after_curly = split_curly[1] | strip
                                  assign has_before = false
                                  assign has_after = false
                                  if final_text != ''
                                    assign has_before = true
                                  endif
                                  if after_curly != ''
                                    assign has_after = true
                                  endif
                                  if has_before and has_after
                                    assign final_text = final_text | strip | append: '&nbsp;<span class="styled">' | append: styled_text | append: '</span>&nbsp;' | append: after_curly
                                  elsif has_before
                                    assign final_text = final_text | strip | append: '&nbsp;<span class="styled">' | append: styled_text | append: '</span>' | append: after_curly
                                  elsif has_after
                                    assign final_text = final_text | strip | append: '<span class="styled">' | append: styled_text | append: '</span>&nbsp;' | append: after_curly
                                  else
                                    assign final_text = final_text | strip | append: '<span class="styled">' | append: styled_text | append: '</span>' | append: after_curly
                                  endif
                                else
                                  assign final_text = final_text | append: part
                                endif
                              endfor
                          -%}
                        <button {{ block.shopify_attributes }} id="{{ block.id }}" class="component-tabs__tab{% if forloop.first %} active{% endif %} tab-js custom-heading
                        {{ block.settings.heading_style }}{% if uppercase_heading %} uppercase{% endif %}{% if block.settings.heading_style == 'subheading-font' and settings.use_heading_font_subheadings %} subheading-heading-font{% endif %}">
                          {% if block.settings.heading_style == 'subheading-font' and settings.bolder_subheadings_font %}<b>{% endif %}
                            {% if block.settings.custom_heading != blank %}{{ final_text }}{% else %}{{ block.settings.page.title | escape }}{% endif %}
                          {% if block.settings.heading_style == 'subheading-font' and settings.bolder_subheadings_font %}</b>{% endif %}
                        </button>
                        {% endif %}
                    {%- endfor -%}
                </component-tabs>
            </div>
        </div>
        <div class="section-tabs__content-wrapper">
            {%- for block in section.blocks -%}
              {%- if block.settings.page != blank or block.settings.custom_heading != blank and block.settings.text != blank -%}
                <div {{ block.shopify_attributes }} id="content-{{ block.id }}" class="component-tabs__content tab-content-js{% if forloop.first %} active{% endif %}">
                    {% if block.settings.text != blank %}
                      {%- liquid
                        assign uppercase_text = false
                        if block.settings.text_style == 'section-heading' and settings.uppercase_section_headings
                          assign uppercase_text = true
                        elsif block.settings.text_style == 'secondary-heading' and settings.uppercase_secondary_headings
                          assign uppercase_text = true
                        elsif block.settings.text_style == 'subheading-font' and settings.uppercase_subheadings
                            assign uppercase_text = true
                        elsif block.settings.text_style == 'body-font' and settings.uppercase_body
                            assign uppercase_text = true
                        elsif block.settings.text_style == 'caption-font' and settings.uppercase_caption
                            assign uppercase_text = true
                        endif
                      -%}
                        <div class="richtext rte link-underline {{ block.settings.text_style }}{% if uppercase_text %} uppercase{% endif %} 
                          {% if block.settings.text_style == 'subheading-font' %}{% if settings.use_heading_font_subheadings %} subheading-heading-font{% endif %}{% if settings.bolder_subheadings_font %} bold{% endif %}{% endif %}">
                            {{ block.settings.text }}
                        </div>
                    {% endif %}
                    {% if block.settings.page != blank %}
                    {% liquid 
                      assign uppercase_headings = false
                      if block.settings.rte_heading_style == 'body-font' and settings.uppercase_body
                        assign uppercase_headings = true
                      elsif block.settings.rte_heading_style == 'subheading-font' and settings.uppercase_subheadings
                        assign uppercase_headings = true
                      elsif block.settings.rte_heading_style == 'secondary-heading' and settings.uppercase_secondary_headings
                        assign uppercase_headings = true
                      elsif block.settings.rte_heading_style == 'section-heading' and settings.uppercase_section_headings
                          assign uppercase_headings = true
                      elsif block.settings.rte_heading_style == 'page-title' and settings.uppercase_page_titles
                          assign uppercase_headings = true
                      endif
                    %}
                        <div class="page__content heading-style-{{ block.settings.rte_heading_style }} {% if block.settings.rte_heading_style == 'subheading-font' %}{% if settings.use_heading_font_subheadings %} heading-style-subheading-heading-font{% endif %}{% if settings.bolder_subheadings_font %} heading-style-bold{% endif %}{% endif %}
                           rte body-font{% if settings.uppercase_body %} uppercase{% endif %}{% if uppercase_headings %} headings-uppercase{% endif %}">
                            {{ block.settings.page.content }}
                        </div>
                    {% endif %}
                </div>
              {%- endif -%}
            {%- endfor -%}
        </div>
      {% if section_framing %}</div></div>{% endif %}
    </div>
</div>
{% endif %}

{% schema %}
{
  "name": "t:sections.tabs.name",
  "tag": "section",
  "class": "section-tabs",
  "max_blocks": 5,
  "settings": [
    {
      "type": "text",
      "id": "subheading",
      "default": "Subheading",
      "label": "t:sections.all.settings_titles.subheading.subheading.label"
    },
    {
      "type": "select",
      "id": "subheading_style",
      "options": [
        {
          "value": "caption-font",
          "label": "t:sections.all.headings_style.options__6.label"
        },
        {
          "value": "body-font",
          "label": "t:sections.all.headings_style.options__1.label"
        },
        {
          "value": "subheading-font",
          "label": "t:sections.all.headings_style.options__2.label"
        },
        {
          "value": "secondary-heading",
          "label": "t:sections.all.headings_style.options__3.label"
        },
        {
          "value": "section-heading",
          "label": "t:sections.all.headings_style.options__4.label"
        }
      ],
      "default": "subheading-font",
      "label": "t:sections.all.headings_style.subheading_style.label"
    },
    {
      "type": "select",
      "id": "subheading_tag",
      "options": [
        {
            "value": "h1",
            "label": "t:sections.all.tag.options__1.label"
        },
        {
            "value": "h2",
            "label": "t:sections.all.tag.options__2.label"
        },
        {
            "value": "h3",
            "label": "t:sections.all.tag.options__3.label"
        },
        {
            "value": "h4",
            "label": "t:sections.all.tag.options__4.label"
        },
        {
            "value": "h5",
            "label": "t:sections.all.tag.options__5.label"
        },
        {
            "value": "h6",
            "label": "t:sections.all.tag.options__6.label"
        },
        {
            "value": "div",
            "label": "t:sections.all.tag.options__7.label"
        },
        {
            "value": "span",
            "label": "t:sections.all.tag.options__8.label"
        }, 
        {
            "value": "p",
            "label": "t:sections.all.tag.options__9.label"
        }
        ],
        "default": "h3",
        "label": "t:sections.all.tag.subheading_tag.label"
    },
    {
      "type": "text",
      "id": "heading",
      "default": "Collapsible tabs",
      "label": "t:sections.all.settings_titles.heading.heading.label",
      "info": "t:sections.all.settings_titles.heading.heading.info"
    },
    {
      "type": "select",
      "id": "heading_style",
      "options": [
        {
          "value": "caption-font",
          "label": "t:sections.all.headings_style.options__6.label"
        },
        {
          "value": "body-font",
          "label": "t:sections.all.headings_style.options__1.label"
        },
        {
          "value": "subheading-font",
          "label": "t:sections.all.headings_style.options__2.label"
        },
        {
          "value": "secondary-heading",
          "label": "t:sections.all.headings_style.options__3.label"
        },
        {
          "value": "section-heading",
          "label": "t:sections.all.headings_style.options__4.label"
        },
        {
          "value": "page-title",
          "label": "t:sections.all.headings_style.options__5.label"
        }
      ],
      "default": "section-heading",
      "label": "t:sections.all.headings_style.heading_style.label"
    },
    {
      "type": "select",
      "id": "heading_tag",
      "options": [
        {
            "value": "h1",
            "label": "t:sections.all.tag.options__1.label"
        },
        {
            "value": "h2",
            "label": "t:sections.all.tag.options__2.label"
        },
        {
            "value": "h3",
            "label": "t:sections.all.tag.options__3.label"
        },
        {
            "value": "h4",
            "label": "t:sections.all.tag.options__4.label"
        },
        {
            "value": "h5",
            "label": "t:sections.all.tag.options__5.label"
        },
        {
            "value": "h6",
            "label": "t:sections.all.tag.options__6.label"
        },
        {
            "value": "div",
            "label": "t:sections.all.tag.options__7.label"
        },
        {
            "value": "span",
            "label": "t:sections.all.tag.options__8.label"
        }, 
        {
            "value": "p",
            "label": "t:sections.all.tag.options__9.label"
        }
        ],
        "default": "h2",
        "label": "t:sections.all.tag.heading_tag.label"
    },
    {
      "type": "checkbox",
      "id": "center_text",
      "default": true,
      "label": "t:sections.all.alignment.center_text.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.settings_titles.section_layout_header.content"
    },
    {
      "type": "select",
      "id": "grid_style",
      "options": [
        {
          "value": "page",
          "label": "t:sections.all.grid_style.options__1.label"
        },
        {
          "value": "secondary",
          "label": "t:sections.all.grid_style.options__3.label"
        },
        {
          "value": "alternative",
          "label": "t:sections.all.grid_style.options__2.label"
        }
      ],
      "default": "alternative",
      "label": "t:sections.all.grid_style.label"
    },
    {
      "type": "checkbox",
      "id": "disable_max_width",
      "default": false,
      "label": "t:sections.all.disable_max_width.label"
    },
    {
      "type": "checkbox",
      "id": "show_bottom_line",
      "default": false,
      "label": "t:sections.all.show_bottom_line.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.colors.header.content"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.color_scheme.label",
      "default": "background-1"
    },
    {
      "type": "select",
      "id": "section_framing",
      "options": [
        {
          "value": "disable",
          "label": "t:sections.all.section_framing.options__1.label"
        },
        {
          "value": "enable",
          "label": "t:sections.all.section_framing.options__2.label"
        },
        {
          "value": "grid",
          "label": "t:sections.all.section_framing.options__3.label"
        }
      ],
      "default": "disable",
      "label": "t:sections.all.section_framing.label",
      "info": "t:sections.all.section_framing.info"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing.header.content"
    },
    {
      "type": "range",
      "id": "top_spacing",
      "min": 0,
      "max": 2,
      "step": 0.1,
      "unit": "x",
      "label": "t:sections.all.spacing.top_spacing.label",
      "default": 1
    },
    {
      "type": "range",
      "id": "bottom_spacing",
      "min": 0,
      "max": 2,
      "step": 0.1,
      "unit": "x",
      "label": "t:sections.all.spacing.bottom_spacing.label",
      "default": 1
    }
  ],
  "blocks": [
    {
      "type": "tab",
      "name": "t:blocks.tab.name",
      "settings": [
        {
          "type": "text",
          "id": "custom_heading",
          "default": "Page heading",
          "label": "t:sections.all.settings_titles.heading.custom_heading.label",
          "info": "t:sections.tabs.settings.custom_heading.info"
        },
        {
          "type": "select",
          "id": "heading_style",
          "options": [
            {
              "value": "caption-font",
              "label": "t:sections.all.headings_style.options__6.label"
            },
            {
              "value": "body-font",
              "label": "t:sections.all.headings_style.options__1.label"
            },
            {
              "value": "subheading-font",
              "label": "t:sections.all.headings_style.options__2.label"
            },
            {
              "value": "secondary-heading",
              "label": "t:sections.all.headings_style.options__3.label"
            },
            {
              "value": "section-heading",
              "label": "t:sections.all.headings_style.options__4.label"
            }
          ],
          "default": "subheading-font",
          "label": "t:sections.all.headings_style.heading_style.label"
        },
        {
          "type": "richtext",
          "id": "text",
          "default": "<p>Collapsible tab content.</p>",
          "label": "t:sections.all.settings_titles.text.text.label"
        },
        {
          "type": "select",
          "id": "text_style",
          "options": [
            {
              "value": "caption-font",
              "label": "t:sections.all.headings_style.options__6.label"
            },
            {
              "value": "body-font",
              "label": "t:sections.all.headings_style.options__1.label"
            },
            {
              "value": "subheading-font",
              "label": "t:sections.all.headings_style.options__2.label"
            },
            {
              "value": "secondary-heading",
              "label": "t:sections.all.headings_style.options__3.label"
            },
            {
              "value": "section-heading",
              "label": "t:sections.all.headings_style.options__4.label"
            }
          ],
          "default": "body-font",
          "label": "t:sections.all.headings_style.text_style.label"
        },
        {
          "type": "page",
          "id": "page",
          "label": "t:sections.all.settings_titles.page.page.label",
          "info": "t:sections.all.settings_titles.page.page.info"
        },
        {
          "type": "select",
          "id": "rte_heading_style",
          "options": [
            {
              "value": "body-font",
              "label": "t:sections.all.headings_style.options__1.label"
            },
            {
              "value": "subheading-font",
              "label": "t:sections.all.headings_style.options__2.label"
            },
            {
              "value": "secondary-heading",
              "label": "t:sections.all.headings_style.options__3.label"
            },
            {
              "value": "section-heading",
              "label": "t:sections.all.headings_style.options__4.label"
            },
            {
              "value": "page-title",
              "label": "t:sections.all.headings_style.options__5.label"
            }
          ],
          "default": "section-heading",
          "label": "t:sections.all.headings_style.richtext_heading_style.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.tabs.name",
      "blocks": [
        {
          "type": "tab",
          "settings": {
            "custom_heading": "First page heading"
          }
        },
        {
          "type": "tab",
          "settings": {
            "custom_heading": "Second page heading"
          }
        },
        {
          "type": "tab",
          "settings": {
            "custom_heading": "Third page heading"
          }
        }
      ]
    }
  ],
  "enabled_on": {
    "templates": ["*"],
    "groups": [
      "footer"
    ]
  }
}
{% endschema %}